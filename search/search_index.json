{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Git Tutorial Notes","text":"<p>Welcome to Git Tutorial Notes. This site provides a structured guide to learning Git, from basic commands to more advanced topics like branching, merging, and working with remote repositories.</p>"},{"location":"DiveDeeperIntoBasics/","title":"Git Dive Deep","text":""},{"location":"DiveDeeperIntoBasics/#git-init","title":"git init","text":"<ul> <li>default branch created while using git init is the master branch.</li> <li>When we initialize the repo, two regions are created.</li> <li>Staging area (where changes are prepared before commit)</li> <li>Non-staging area (working directory with untracked/modified files)</li> </ul> <p>The <code>.git</code> directory contains:</p> <ul> <li>HEAD file (references current branch)</li> <li>config file (repository configuration)</li> <li>objects directory (stores all content)</li> <li>refs directory (stores pointers to commits)</li> </ul>"},{"location":"DiveDeeperIntoBasics/#remove-a-local-git-repo","title":"Remove a local git repo","text":"<pre><code>rm -rf .git/\n</code></pre> <p>This deletes the repository history.</p>"},{"location":"DiveDeeperIntoBasics/#rename-default-branch-name","title":"Rename default branch name","text":"<pre><code>git init --initial-branch=main\n</code></pre> <p>Sets initial branch to main instead of master.</p> <p>Nested git repository. Never create a git repo inside a repo. Avoid this to avoid chaos.</p> <p>Never create a git repo inside another repo (except for submodules)</p> <p>Potential issues:</p> <ul> <li> <p>Conflicting .git directories</p> </li> <li> <p>Confusing version control boundaries</p> </li> <li> <p>Complex merge behaviors</p> </li> </ul>"},{"location":"DiveDeeperIntoBasics/#git-add","title":"git add","text":""},{"location":"DiveDeeperIntoBasics/#core-functionality","title":"Core Functionality","text":"<p>Stages changes from working directory to staging area</p>"},{"location":"DiveDeeperIntoBasics/#advanced-usage","title":"Advanced Usage","text":"<p>Add a part of file to the staged area.</p>"},{"location":"DiveDeeperIntoBasics/#interactive-add-choose-hunks","title":"Interactive add (choose hunks)","text":"<pre><code>git add -p\n</code></pre>"},{"location":"DiveDeeperIntoBasics/#add-all-tracked-files-not-new-files","title":"Add all tracked files (not new files)","text":"<pre><code>git add -u\n</code></pre>"},{"location":"DiveDeeperIntoBasics/#add-all-tracked-and-untracked-files","title":"Add all tracked and untracked files","text":"<pre><code>git add -A\n</code></pre> <pre><code># Add by file pattern\ngit add '*.js'\n</code></pre>"},{"location":"DiveDeeperIntoBasics/#behind-the-scenes","title":"Behind the Scenes","text":"<ul> <li>Creates SHA-1 hashes of file contents</li> <li>Stores compressed versions in object database</li> <li>Updates index file with new file modes and hashes</li> </ul>"},{"location":"DiveDeeperIntoBasics/#git-commit","title":"git commit","text":""},{"location":"DiveDeeperIntoBasics/#commit-anatomy","title":"Commit Anatomy","text":"<p>Creates a commit object containing:</p> <ul> <li>Author info</li> <li>Commit message</li> <li>Pointer to tree object (snapshot of repo)</li> <li>Pointer to parent commit(s)</li> </ul>"},{"location":"DiveDeeperIntoBasics/#advanced-options","title":"Advanced Options","text":"<pre><code># Amend previous commit\ngit commit --amend\n\n# Amend previous commit with no commit message\ngit commit --amend --no-edit\n\n# Sign commit cryptographically\ngit commit -S\n\n# Commit with multiline message\ngit commit -m \"Title\" -m \"Description\"\n\n# Commit with no changes (run pipeline)\ngit commit --allow-empty -m \"dummy\"\n\n</code></pre>"},{"location":"DiveDeeperIntoBasics/#technical-details","title":"Technical Details","text":"<ul> <li>Each commit has a unique SHA-1 hash</li> <li>Commit objects reference tree objects</li> <li>Tree objects reference blob objects (files) and other trees</li> </ul>"},{"location":"DiveDeeperIntoBasics/#git-push","title":"git push","text":""},{"location":"DiveDeeperIntoBasics/#advanced-techniques","title":"Advanced Techniques","text":"<pre><code># Push specific branch\ngit push origin branch-name\n\n# Set upstream branch\ngit push -u origin branch-name\n\n# Force push (use with caution)\ngit push --force\n</code></pre>"},{"location":"DiveDeeperIntoBasics/#protocols-and-internals","title":"Protocols and Internals","text":"<ul> <li>Can use HTTPS, SSH, or Git protocol</li> <li>Underlying transfer uses packfiles for efficiency</li> <li>Uses the \"smart\" protocol for modern servers</li> </ul>"},{"location":"DiveDeeperIntoBasics/#push-rejection-scenarios","title":"Push Rejection Scenarios","text":"<ol> <li>Non-fast-forward: Remote has commits you don't have locally</li> <li>Solution: <code>git pull</code> first to merge changes</li> <li>Permission denied: Authentication issues</li> <li>Solution: Check SSH keys or credentials</li> <li>Shallow update not allowed: Pushing from shallow clone</li> <li>Solution: Perform full clone</li> </ol>"},{"location":"DiveDeeperIntoBasics/#git-log","title":"git log","text":"<p>Gives last 2 commits</p> <pre><code>git log -n 2\n</code></pre> <p>Gives diff layout of commit status:</p> <pre><code>git log --pretty= short\n</code></pre> <pre><code>git log --pretty= full\n</code></pre> <pre><code>git log --pretty= fuller\n</code></pre> <pre><code>git log --pretty= oneline\n</code></pre> <pre><code> git log --pretty=form\nat:\"%h\"\n</code></pre> <pre><code># prints commit id\n git log --pretty=format: \"%h\"\n</code></pre> <pre><code># prints commit id and commit message\n git log --pretty=format: \"%h %s \"\n</code></pre> <pre><code>#prints the commit from a week ago\ngit log --since=\"1 week ago\"\n</code></pre> <pre><code>#prints the commit within an interval\ngit log --since=\"02/19/2024\" --until=\"05/20/2025\"\n</code></pre> <pre><code># shows you the commit history with the patch diff included\ngit log -p\n</code></pre> <pre><code>git log\n</code></pre>"},{"location":"DiveDeeperIntoBasics/#summary","title":"Summary","text":"<ul> <li>Head is the pointer to the latest commit.</li> <li>You can change head.</li> <li>Every next commit points to the previous commit. It creates a linked list of commits.</li> </ul>"},{"location":"Introduction/","title":"Git Introduction","text":""},{"location":"Introduction/#what-is-git","title":"What is Git?","text":"<p>Git is a distributed version control system. It helps to track changes in files, typically source code. It allows to collaborate with group of people without overwriting eachother's work.</p>"},{"location":"Introduction/#git-installation","title":"Git Installation","text":""},{"location":"Introduction/#on-macos","title":"On macOS","text":"<p>Git comes bundled with the Command Line Tools for Xcode. To check if it\u2019s installed, open Terminal and type:</p> <pre><code>git --version\n</code></pre> <p>or</p> <pre><code>git -v\n</code></pre>"},{"location":"Introduction/#setting-personal-info-to-git","title":"Setting Personal Info to Git","text":"<p>Git requires you to set your name and email before you start committing changes. This information is stored in your commits.</p> <pre><code>git config --global user.name \"yourusername\"\n</code></pre> <pre><code>git config --global user.email \"youremail@example.com\"\n</code></pre>"},{"location":"Introduction/#basic-commands","title":"Basic Commands","text":"<p>follow along step by step:</p> <ol> <li>Create a folder/ directory called <code>git_module</code></li> </ol> <pre><code>mkdir git_module\ncd git_module\n</code></pre> <ol> <li>Create a subfolder called <code>first_app</code></li> </ol> <pre><code>mkdir first_app\ncd first_app\n</code></pre> <ol> <li>list files in the directory</li> </ol> <pre><code>  ls -l\n</code></pre> <ol> <li>Create a new file in the directory.</li> </ol> <pre><code> nano file1.txt\n</code></pre> <ol> <li> <p>In the text editor, write some texts 7. <code>Ctrl+X</code> and press Y</p> </li> <li> <p>Initialize your git repository</p> </li> </ol> <pre><code>git init\n</code></pre> <p>By this step, you have succesfully initialized a git repo</p>"},{"location":"Introduction/#spoonfeed-git-changes","title":"Spoonfeed git changes","text":"<p>Git doesn\u2019t automatically track changes in your files. You need to tell Git when a file is added, modified, or deleted.</p> <p>Files that Git doesn\u2019t know about are called untracked files.</p> <p>Untracked files aren\u2019t included in commits, and Git won\u2019t keep a history of them until you explicitly add them.</p> <p>If an untracked file is deleted before being added, Git cannot recover it.</p> <p>Tip: Always use git status to see which files are untracked, modified, or staged for commit.</p>"},{"location":"Introduction/#untracked-files-are-in-red","title":"Untracked files are in red:","text":""},{"location":"Introduction/#adding-git-files","title":"Adding git files","text":"<p>This is adding untracked files.</p> <pre><code>git add filename.txt\n</code></pre> <p>Here, the files are transformed from unstaging areas to staging area.</p> <p>If you have mutilple untracked files, then you can track it all at once.</p> <pre><code>git add .\n</code></pre>"},{"location":"Introduction/#git-status","title":"Git Status","text":"<p>To check the status of git:</p> <pre><code>git status\n</code></pre> <p></p> <p>Files that Git already knows about. If changes are staged for commit, they appear in green.. New files Git doesn\u2019t know about yet. These appear in red.</p>"},{"location":"Introduction/#commit-changes","title":"commit changes","text":"<p>Commits the staged changes to the repository. It basically snapshots your repo at a specific point. In other words, it is recording the changes in the repo.</p> <pre><code>git commit\n</code></pre> <p>This opens a text editor to type your commit.</p> <ol> <li>Press I to enable Insert.</li> <li>Type your commit message.</li> <li>Press Escape key.</li> <li>type <code>:wq</code> and press Enter.</li> </ol> <p>If you are smart then just do: (Quick Commit)</p> <pre><code>git commit -m \"your commit message\"\n</code></pre>"},{"location":"Introduction/#commit-history","title":"commit history","text":"<p>View your commit history.</p> <pre><code>git log\n</code></pre> <p>This will display commit hash, Author, Date and Commit message.</p>"},{"location":"Introduction/#summary","title":"Summary","text":"<ol> <li> <p>Create a local repo: <code>git init</code></p> </li> <li> <p>When we create a new file in the repo, git is unaware of it.</p> </li> <li><code>git add filename.extension</code></li> <li>Now git is in staging area and git is aware of the file.</li> <li><code>git commit -m \"commit message\"</code></li> <li><code>git status</code></li> <li><code>git log</code></li> </ol>"},{"location":"gitEssentials/","title":"git reset","text":"<ul> <li>unstage files</li> <li>undo commits</li> <li>delete commits</li> </ul>"}]}